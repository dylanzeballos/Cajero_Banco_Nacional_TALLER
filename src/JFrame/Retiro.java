/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package JFrame;

import java.text.DecimalFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;

public class Retiro extends javax.swing.JFrame {

    Usuario cliente;
    DecimalFormat frmt = new DecimalFormat();
    int indiceComboBox;
    /**
    * Constructor de la clase Retiro.
    * @param cliente Objeto de la clase Usuario que representa al cliente actual.
    * Inicializa los componentes de la interfaz gráfica y configura la ventana de la aplicación.
    * Establece el cliente actual y llena el ComboBox con las cuentas del cliente.
    * Oculta algunos elementos de la interfaz que se mostrarán más tarde según sea necesario.
    */
    public Retiro(Usuario cliente) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.cliente = cliente;
        // Llena el ComboBox con las cuentas del cliente.
        for (int i = 0; i < cliente.getCantidadCuentas(); i++) {
            cmbCuentasUsuarioOrigen.addItem(cliente.getTipoCuentas(i) + ": #" + String.valueOf(cliente.getCuenta(i)));
        }
        // Oculta algunos elementos de la interfaz que se mostrarán más tarde según sea necesario.
        txtSaldo.setVisible(false);
        txtSaldoOrigen.setVisible(false);
        txtValorRetiro.setVisible(false);
        txtSimboloDolar.setVisible(false);
        txtFieldDineroRetiro.setVisible(false);
        txtSeleccioneCuenta.setVisible(false);
        txtError1.setVisible(false);
        txtError2.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLbanco1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        txtCuentaOrigen = new javax.swing.JLabel();
        txtSeleccioneCuenta = new javax.swing.JLabel();
        cmbCuentasUsuarioOrigen = new javax.swing.JComboBox<>();
        btnValidar1 = new javax.swing.JButton();
        txtError1 = new javax.swing.JLabel();
        txtSaldo = new javax.swing.JLabel();
        txtSaldoOrigen = new javax.swing.JLabel();
        txtSimboloDolar = new javax.swing.JLabel();
        txtValorRetiro = new javax.swing.JLabel();
        txtFieldDineroRetiro = new javax.swing.JTextField();
        txtError2 = new javax.swing.JLabel();
        btnVolver = new javax.swing.JPanel();
        txtVolver = new javax.swing.JLabel();
        btnConfirmar = new javax.swing.JPanel();
        txtConfirmar = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel5.setBackground(new java.awt.Color(0, 51, 102));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLbanco1.setFont(new java.awt.Font("Segoe UI Black", 3, 24)); // NOI18N
        jLbanco1.setForeground(new java.awt.Color(204, 204, 204));
        jLbanco1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/lOGOA.png"))); // NOI18N
        jLbanco1.setText("BANCO NACIONAL");
        jPanel5.add(jLbanco1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 0, 410, 190));

        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 180));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setFont(new java.awt.Font("Segoe UI Black", 0, 36)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 51, 51));
        jLabel4.setText("RETIROS");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 200, 160, 60));
        jPanel2.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 250, 190, 20));

        txtCuentaOrigen.setFont(new java.awt.Font("Segoe UI Black", 1, 24)); // NOI18N
        txtCuentaOrigen.setForeground(new java.awt.Color(0, 51, 51));
        txtCuentaOrigen.setText("CUENTA ORIGEN");
        jPanel2.add(txtCuentaOrigen, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 300, 240, 30));

        txtSeleccioneCuenta.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        txtSeleccioneCuenta.setForeground(new java.awt.Color(0, 51, 51));
        txtSeleccioneCuenta.setText("Seleccione la cuenta origen:");
        jPanel2.add(txtSeleccioneCuenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 330, 320, 40));

        cmbCuentasUsuarioOrigen.setBackground(new java.awt.Color(204, 204, 204));
        cmbCuentasUsuarioOrigen.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        cmbCuentasUsuarioOrigen.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        cmbCuentasUsuarioOrigen.setName("BOLIVIANOS\n"); // NOI18N
        cmbCuentasUsuarioOrigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCuentasUsuarioOrigenActionPerformed(evt);
            }
        });
        jPanel2.add(cmbCuentasUsuarioOrigen, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 380, 250, 30));

        btnValidar1.setBackground(new java.awt.Color(204, 204, 204));
        btnValidar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/iconoVistoSmall.png"))); // NOI18N
        btnValidar1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnValidar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValidar1ActionPerformed(evt);
            }
        });
        jPanel2.add(btnValidar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 380, 30, 30));

        txtError1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel2.add(txtError1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 440, 280, 20));

        txtSaldo.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        txtSaldo.setForeground(new java.awt.Color(0, 51, 51));
        txtSaldo.setText("Saldo disponible:");
        jPanel2.add(txtSaldo, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 480, 200, 30));

        txtSaldoOrigen.setFont(new java.awt.Font("Segoe UI Black", 1, 24)); // NOI18N
        jPanel2.add(txtSaldoOrigen, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 545, 160, 35));

        txtSimboloDolar.setBackground(new java.awt.Color(0, 0, 0));
        txtSimboloDolar.setFont(new java.awt.Font("Segoe UI Black", 1, 24)); // NOI18N
        txtSimboloDolar.setForeground(new java.awt.Color(51, 51, 51));
        jPanel2.add(txtSimboloDolar, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 545, 50, 35));

        txtValorRetiro.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        txtValorRetiro.setForeground(new java.awt.Color(0, 51, 51));
        txtValorRetiro.setText("Valor a retirar:");
        jPanel2.add(txtValorRetiro, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 400, -1, 40));

        txtFieldDineroRetiro.setBackground(new java.awt.Color(255, 255, 255));
        txtFieldDineroRetiro.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel2.add(txtFieldDineroRetiro, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 450, 150, 30));

        txtError2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel2.add(txtError2, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 510, 180, 20));

        btnVolver.setBackground(new java.awt.Color(153, 0, 0));
        btnVolver.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnVolverMouseClicked(evt);
            }
        });

        txtVolver.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        txtVolver.setText("Volver");
        txtVolver.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtVolverMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout btnVolverLayout = new javax.swing.GroupLayout(btnVolver);
        btnVolver.setLayout(btnVolverLayout);
        btnVolverLayout.setHorizontalGroup(
            btnVolverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, btnVolverLayout.createSequentialGroup()
                .addContainerGap(74, Short.MAX_VALUE)
                .addComponent(txtVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62))
        );
        btnVolverLayout.setVerticalGroup(
            btnVolverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnVolverLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(txtVolver)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel2.add(btnVolver, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 660, 210, 60));

        btnConfirmar.setBackground(new java.awt.Color(0, 51, 153));
        btnConfirmar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnConfirmarMousePressed(evt);
            }
        });

        txtConfirmar.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        txtConfirmar.setText("Confirmar");

        javax.swing.GroupLayout btnConfirmarLayout = new javax.swing.GroupLayout(btnConfirmar);
        btnConfirmar.setLayout(btnConfirmarLayout);
        btnConfirmarLayout.setHorizontalGroup(
            btnConfirmarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, btnConfirmarLayout.createSequentialGroup()
                .addContainerGap(54, Short.MAX_VALUE)
                .addComponent(txtConfirmar)
                .addGap(46, 46, 46))
        );
        btnConfirmarLayout.setVerticalGroup(
            btnConfirmarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnConfirmarLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(txtConfirmar)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel2.add(btnConfirmar, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 660, 190, 60));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 800));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 800));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
    * Método invocado cuando se selecciona una cuenta de origen en el ComboBox de cuentas.
    * @param evt Evento de acción que desencadena la selección de una cuenta de origen.
    * Muestra u oculta elementos de la interfaz según la selección del usuario.
    * Obtiene el saldo disponible de la cuenta seleccionada y muestra su valor.
    * Establece el símbolo de la moneda correspondiente.
    */
    private void cmbCuentasUsuarioOrigenActionPerformed(java.awt.event.ActionEvent evt) {
        int selectedIndex = cmbCuentasUsuarioOrigen.getSelectedIndex();
        if (selectedIndex > 0) {
            // Mostrar elementos de la interfaz según la selección del usuario.
            txtSaldo.setVisible(true);
            txtSaldoOrigen.setVisible(true);
            txtValorRetiro.setVisible(true);
            txtSimboloDolar.setVisible(true);
            txtFieldDineroRetiro.setVisible(true);
            txtSeleccioneCuenta.setVisible(true);
            txtError1.setVisible(false);
            txtError2.setVisible(false);
            // Obtener el saldo disponible de la cuenta seleccionada y mostrar su valor.
            float saldoDisponible = cliente.getSaldo(selectedIndex - 1);
            txtSaldoOrigen.setText(String.valueOf(saldoDisponible));
            // Establecer el símbolo de la moneda correspondiente.
            String moneda = String.valueOf(cliente.getMoneda(selectedIndex-1));
            if ("BOLIVIANOS".equals(moneda)) {
            txtSimboloDolar.setText("Bs");
            } else if ("DOLARES".equals(moneda)) {
            txtSimboloDolar.setText("US$");
            } else if ("EUROS".equals(moneda)) {
            txtSimboloDolar.setText("£");
            } else {
            txtSimboloDolar.setText("");
            }
        } else {
            // Ocultar elementos de la interfaz si no se selecciona ninguna cuenta.
            txtSaldo.setVisible(false);
            txtSaldoOrigen.setVisible(false);
            txtValorRetiro.setVisible(false);
            txtSimboloDolar.setVisible(false);
            txtFieldDineroRetiro.setVisible(false);
        }
    }
    /**
    * Método invocado cuando se presiona el botón de validar.
    * @param evt Evento de acción que desencadena la validación de la cuenta de origen.
    * Verifica si se ha seleccionado una cuenta de origen.
    * Habilita o deshabilita elementos de la interfaz según el resultado de la validación.
    * Limpia el campo de texto para ingresar el monto de transferencia.
    */
    private void btnValidar1ActionPerformed(java.awt.event.ActionEvent evt) {
        if(cmbCuentasUsuarioOrigen.getSelectedIndex()==0){
            txtError1.setVisible(true);
        }else{
            txtError1.setVisible(false);
            cmbCuentasUsuarioOrigen.setEnabled(false);
            btnValidar1.setEnabled(false);
            txtValorRetiro.setVisible(true);
            txtSimboloDolar.setVisible(true);
            txtFieldDineroRetiro.setVisible(true);
            //btnValidar2.setVisible(true);
            txtFieldDineroRetiro.setText("");
        }
    }
    /**
    * Método invocado cuando se hace clic en el texto "Volver".
    * @param evt Evento de ratón que desencadena la acción de volver al menú principal.
    * Crea una nueva instancia de la ventana del menú principal y la hace visible.
    * Cierra la ventana actual.
    */
    private void txtVolverMouseClicked(java.awt.event.MouseEvent evt) {
        MenuPrincipal pantMenu=new MenuPrincipal(this.cliente);
        pantMenu.setVisible(true);
        dispose();
    }

    private void btnVolverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVolverMouseClicked
    }//GEN-LAST:event_btnVolverMouseClicked
    /**
    * Método invocado cuando se presiona el botón de confirmar retiro.
    * @param evt Evento de ratón que desencadena la acción de confirmar el retiro.
    * Intenta realizar las siguientes acciones:
    * - Obtiene el monto a retirar del campo de texto.
    * - Valida que el monto de retiro sea mayor o igual a cero.
    * - Obtiene el índice de la cuenta seleccionada en el ComboBox.
    * - Ajusta el índice de la cuenta (restando 1 para ignorar el primer elemento del ComboBox, que puede ser un marcador de posición).
    * - Actualiza el saldo de la cuenta del usuario restando el monto del retiro.
    * - Guarda el movimiento de retiro en el historial de transacciones de la cuenta.
    * - Actualiza la información del usuario en el archivo de datos.
    * - Muestra un recibo con los detalles del retiro.
    * Si se produce una excepción NumberFormatException, muestra un mensaje de error indicando que se debe ingresar un valor válido.
    */
    private void btnConfirmarMousePressed(java.awt.event.MouseEvent evt) {
        try {
            // Obtiene el valor del retiro desde el text field
            float valorRetiro = Float.parseFloat(txtFieldDineroRetiro.getText());

            // Valida el valor del retiro
            if (valorRetiro <= 0) {
                txtError2.setText("El valor debe ser mayor a 0");
                txtError2.setVisible(true);
                return;
            }

            // Obtiene el indice de la cuenta seleccionada
            int cuentaSeleccionada = cmbCuentasUsuarioOrigen.getSelectedIndex();
            if (cuentaSeleccionada <= 0) { // Suponiendo que el primer elemento es un marcador de posición
                txtError2.setText("Seleccione una cuenta válida");
                txtError2.setVisible(true);
                return;
            }

            // Ajustar el índice para un acceso a la matriz basado en cero
            int ajustaIndex = cuentaSeleccionada - 1;

            // Comprueba si la cuenta tiene saldo suficiente
            float saldoDisponible = cliente.getSaldo(ajustaIndex);
            if (valorRetiro > saldoDisponible) {
                txtError2.setText("Saldo insuficiente");
                txtError2.setVisible(true);
                return;
            }

            // Actualiza el saldo del usuario
            cliente.setSaldos(saldoDisponible - valorRetiro, ajustaIndex);

            // Registrar la transacción
           String tipoOperacion = "Retiro de efectivo";
           String beneficiario = "Cuenta propia"; // Puedes ajustar esto según sea necesario
           cliente.addMovimiento(tipoOperacion, beneficiario, valorRetiro, ajustaIndex);

            //  Actualiza los datos del usuario en el archivo
            ArrayList<String> archivo = cliente.leerArchivo();
            archivo.get(cliente.getFila());
            String nuevaFila = cliente.escribirFilaNueva();
            cliente.anexar(cliente.sobrescribirArchivo(archivo, cliente.getFila(), nuevaFila), "usuarios.txt");

            // Muestra el recibo
            Recibo recibo = new Recibo(cliente, -valorRetiro, cliente.getCuenta(ajustaIndex));
            recibo.setVisible(true);
            this.dispose();
        } catch (NumberFormatException e) {
            txtError2.setText("Ingrese un valor válido");
            txtError2.setVisible(true);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Retiro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Retiro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Retiro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Retiro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Retiro(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel btnConfirmar;
    private javax.swing.JButton btnValidar1;
    private javax.swing.JPanel btnVolver;
    private javax.swing.JComboBox<String> cmbCuentasUsuarioOrigen;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLbanco1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel txtConfirmar;
    private javax.swing.JLabel txtCuentaOrigen;
    private javax.swing.JLabel txtError1;
    private javax.swing.JLabel txtError2;
    private javax.swing.JTextField txtFieldDineroRetiro;
    private javax.swing.JLabel txtSaldo;
    private javax.swing.JLabel txtSaldoOrigen;
    private javax.swing.JLabel txtSeleccioneCuenta;
    private javax.swing.JLabel txtSimboloDolar;
    private javax.swing.JLabel txtValorRetiro;
    private javax.swing.JLabel txtVolver;
    // End of variables declaration//GEN-END:variables
}
