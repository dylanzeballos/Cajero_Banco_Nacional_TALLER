/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package JFrame;

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.ArrayList;

public class ConfirmacionPagos extends javax.swing.JFrame {

    DecimalFormat frmt=new DecimalFormat();
    public Usuario usuario;
    int filaReceptor;
    int columnaReceptor;
    float valor;
    String cuenta;
    String tarjeta;
    String nombre=null;
    int cuentas;
    LocalDate fechaActual;
    int cuentaSeleccionada;
    int indiceCuentaDestino;
    String transf=null;  //Interbancaria o Directa
    int tipo; 
    
    public ConfirmacionPagos(Usuario cliente, float valorPagado, String numCuenta, String numTarjeta, int cuentaSeleccionada) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.cuentaSeleccionada = cuentaSeleccionada;
        this.usuario = cliente;
        this.valor = valorPagado;
        this.cuenta = numCuenta;
        this.tarjeta = numTarjeta;
        this.cuentas = cuentaSeleccionada;
        this.fechaActual = LocalDate.now();
        this.tipo = 1;
    }
    
    public ConfirmacionPagos(Usuario cliente, float valorPagado, String numCuentaEmisor, 
            String numCuentaReceptor, int filaReceptor, int columnaReceptor, 
            int cuentaSeleccionada, String nombre, String TipoTransf) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.filaReceptor=filaReceptor;
        this.columnaReceptor=columnaReceptor;
        this.cuentaSeleccionada=cuentaSeleccionada;
        this.usuario=cliente;
        valor=valorPagado;
        cuenta=numCuentaEmisor;
        tarjeta=numCuentaReceptor;
        cuentas=cuentaSeleccionada;
        this.nombre=nombre;
        fechaActual=LocalDate.now();
        tipo=2;
        this.transf=TipoTransf;
        
        
    }
    
     public ConfirmacionPagos(Usuario cliente, int indiceCuentaOrigen, int indiceCuentaDestino, float transferencia ){
        initComponents();
        this.setLocationRelativeTo(null);
        tipo=3;
        fechaActual=LocalDate.now();
        this.indiceCuentaDestino=indiceCuentaDestino;
        this.cuentaSeleccionada=indiceCuentaOrigen;
        this.usuario=cliente;
        this.valor=transferencia;
        this.nombre=usuario.getNombreCompleto();
    }
    public ConfirmacionPagos(Usuario cliente, String nombre,int indiceCuentaOrigen, float transferencia){
        initComponents();
        this.setLocationRelativeTo(null);
        tipo=4;
        this.usuario=cliente;
        this.valor=transferencia;
        this.cuentaSeleccionada=indiceCuentaOrigen;
        this.nombre=nombre;
        fechaActual=LocalDate.now();   
        frmt.setMaximumFractionDigits(2);
    }
     
   

    ConfirmacionPagos(Usuario cliente, float montoPagado, String numeroCuenta, int fila, int columna, int i, int i0, String nombre, String interbancaria) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    ConfirmacionPagos(Usuario cliente, float montoPagado, String numeroCuenta, int nombreBanco, String cuenta, int i, int i0, String nombre, String interbancaria) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        btnCancelar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btnPagar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 51));
        jLabel1.setText("Estas seguro de realizar el pago?");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 620, 130));

        jLabel2.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 51, 51));
        jLabel2.setText("Revisa que los datos sean correctos");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 190, 360, 150));

        jPanel3.setBackground(new java.awt.Color(153, 0, 0));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnCancelar.setBackground(new java.awt.Color(153, 0, 0));
        btnCancelar.setFont(new java.awt.Font("Segoe UI Black", 1, 24)); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.setBorder(null);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jPanel3.add(btnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 190, -1));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 400, 200, 50));

        jPanel2.setBackground(new java.awt.Color(0, 51, 153));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnPagar.setBackground(new java.awt.Color(0, 51, 153));
        btnPagar.setFont(new java.awt.Font("Segoe UI Black", 1, 24)); // NOI18N
        btnPagar.setText("Pagar");
        btnPagar.setBorder(null);
        btnPagar.setBorderPainted(false);
        btnPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPagarActionPerformed(evt);
            }
        });
        jPanel2.add(btnPagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 180, 40));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 400, 200, 50));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 650, 500));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPagarActionPerformed
        if (this.tipo == 1) {
            usuario.setSaldos((usuario.getSaldo(cuentaSeleccionada)
                    - valor), (cuentaSeleccionada));
            String tipoOperacion = "Pago de tarjeta";
            String beneficiario = "Banco Nacional";
            usuario.addMovimiento(tipoOperacion, beneficiario, valor, cuentaSeleccionada);
            
            ArrayList<String> archivo=usuario.leerArchivo();
            archivo.get(usuario.getFila());
            String nuevaFila=usuario.escribirFilaNueva();
            usuario.anexar(usuario.sobrescribirArchivo(usuario.leerArchivo(), 
                  usuario.getFila(), nuevaFila),"usuarios.txt");
            ReciboPago newframe2 = new ReciboPago(this.usuario, valor, cuenta, tarjeta);
            newframe2.setVisible(true);
            this.dispose();
            
        } else if (this.tipo == 2) {
            String monedaOrigen = usuario.getMoneda(cuentaSeleccionada);
            usuario.setSaldos((usuario.getSaldo(cuentaSeleccionada)- valor), (cuentaSeleccionada));
            String tipoOperacion = "Transferencia a";
            usuario.addMovimiento(tipoOperacion, nombre, valor, cuentaSeleccionada);
            if(this.transf.equalsIgnoreCase("Interbancaria")){
                valor-=0.4;
            }
            ArrayList<String> archivo=usuario.leerArchivo();
            String datosCuentaDestino[]=archivo.get(filaReceptor).split(";");
            float saldoDestino=Float.parseFloat(datosCuentaDestino[columnaReceptor+2]);
            int indiceMonedaDestino = Integer.parseInt(datosCuentaDestino[columnaReceptor+3]);
            String monedaDestino;
            if (indiceMonedaDestino == 0) {
               monedaDestino = "BOLIVIANOS";
            } else if (indiceMonedaDestino == 1) {
               monedaDestino = "DOLARES";
            } else {
               monedaDestino = "EUROS";
            }
            float tipoCambio = usuario.obtenerTipoDeCambio(monedaOrigen, monedaDestino);
            float montoConvertido = valor * tipoCambio;
            saldoDestino+=montoConvertido;
            datosCuentaDestino[columnaReceptor+2]=String.valueOf(saldoDestino);
            String mensaje=(Arrays.toString(datosCuentaDestino)).replace(", ", ";").replaceAll("[\\[\\]]","");

            ArrayList<String> archivoModif;
            archivoModif=usuario.sobrescribirArchivo(archivo, 
                    usuario.getFila(), usuario.escribirFilaNueva());
            
            
            archivoModif=usuario.sobrescribirArchivo(archivoModif, 
                    filaReceptor, mensaje);
            usuario.anexar(archivoModif,"usuarios.txt");
            ReciboPago newframe2 = new ReciboPago(this.usuario, valor, cuenta, tarjeta, nombre);
            newframe2.setVisible(true);
            this.dispose();
        } else if (this.tipo == 3) {
            // Obtener las monedas de las cuentas de origen y destino
            String monedaOrigen = usuario.getMoneda(cuentaSeleccionada);
            String monedaDestino = usuario.getMoneda(indiceCuentaDestino);

            // Realizar la conversión de la moneda si es necesario
            float tipoCambio = usuario.obtenerTipoDeCambio(monedaOrigen, monedaDestino);
            float montoConvertido = valor * tipoCambio;

            // Actualizar saldos
            usuario.setSaldos((usuario.getSaldo(cuentaSeleccionada) - valor), (cuentaSeleccionada));
            usuario.setSaldos((usuario.getSaldo(indiceCuentaDestino)+ montoConvertido), (indiceCuentaDestino));
            String tipoOperacion = "Transferencia a";
            usuario.addMovimiento(tipoOperacion, nombre, valor, cuentaSeleccionada);

            String tipoOperacionDestino = "Transferencia de";
            usuario.addMovimiento(tipoOperacionDestino, nombre, montoConvertido, indiceCuentaDestino);

            ArrayList<String> archivo = usuario.leerArchivo();
            archivo.set(usuario.getFila(), usuario.escribirFilaNueva());
            usuario.anexar(archivo, "usuarios.txt");

            ReciboPago newframe2 = new ReciboPago(this.usuario, valor, usuario.getCuenta(cuentaSeleccionada),
                    usuario.getCuenta(indiceCuentaDestino), nombre);
            newframe2.setVisible(true);
            this.dispose();
        }else if (this.tipo == 4) {
            usuario.setSaldos((usuario.getSaldo(cuentaSeleccionada)
                    - valor), (cuentaSeleccionada));
            
            String tipoOperacion = "Transferencia a";
            usuario.addMovimiento(tipoOperacion, nombre, valor - 0.4f, cuentaSeleccionada);

            ArrayList<String> archivo = usuario.leerArchivo();
            archivo.set(usuario.getFila(), usuario.escribirFilaNueva());
            usuario.anexar(archivo, "usuarios.txt");

            ReciboPago newframe2 = new ReciboPago(this.usuario, valor, usuario.getCuenta(cuentaSeleccionada),
                    usuario.getCuenta(indiceCuentaDestino), nombre);
            newframe2.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_btnPagarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        switch (tipo) {
            case 1:
                new Retiro(usuario).setVisible(true);
                break;
            case 3:
                new TransferenciasCuentaCuenta(usuario).setVisible(true);
                break;
            default:
                if (this.transf != null) {
                    if (this.transf.equalsIgnoreCase("Directa")) {
                        new TransferenciasDirectas(usuario).setVisible(true);
                    } else if (this.transf.equalsIgnoreCase("Interbancaria")) {
                        new TransferenciasInterbancarias(usuario).setVisible(true);
                    }
                }
                break;
        }
        dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConfirmacionPagos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConfirmacionPagos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConfirmacionPagos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConfirmacionPagos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConfirmacionPagos(null, -1,null, null, -1).setVisible(true); 
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnPagar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
}
